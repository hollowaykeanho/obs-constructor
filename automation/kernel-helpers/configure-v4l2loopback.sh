#!/bin/bash
# This is an automated installation using root account. You can run this script
# although it is preferred to use setup.sh instead.

version="0.0.1"
module_name="v4l2loopback"
remove_target="all"
modprobe_path="/etc/modprobe.d/${module_name}.conf"
modload_path="/etc/modules-load.d/${module_name}.conf"

load_on_boot=1
max_buffer=""
enable_debug=false
max_user=""
max_width=""
max_height=""
names_list=()
caps_list=()
ids_list=()


################################################################################
# Library Codes                                                                #
################################################################################
_print_status() {
	__status_message=""
	case "$1" in
	warn|Warning|WARNING|warning)
		__status_message="[ WARNING ]"
		shift 1
		;;
	err|Error|ERROR|error)
		__status_message="[ ERROR ]"
		shift 1
		;;
	info|Info|INFO)
		__status_message="[ INFO ]"
		shift 1
		;;
	*)
		__status_message="[ INFO ]"
		;;
	esac

	1>&2 echo -e "$__status_message $@"
	unset __status_message
}

_check_user_permission() {
	if [ "$(id -u -n)" != "root" ]; then
		_print_status error "no root permission. Did you sudo or su?"
		exit 1
	fi

	if [ "$USER" == "root" ]; then
		_print_status error "\$USER is root. Export USER=non-root user."
		exit 1
	fi
}


################################################################################
# Execution                                                                    #
################################################################################
create_module_configurations() {
	echo "\
# v4l2loopback.conf generated by V4L2LOOPBACK CONFIGURATOR
v4l2loopback" > "$modload_path"
	if [ $load_on_boot -eq 0 ]; then
		exit 0
	fi
}

create_modprobe_configurations() {
	_check_user_permission

	# formulate statements
	statement="\
# v4l2loopback.conf generated by V4L2LOOPBACK CONFIGURATOR
options v4l2loopback"

	# process total devices
	total_devices="${#ids_list[@]}"
	if [ $total_devices -le 0 ]; then
		_print_status error "need to specify at least 1 device."
		exit 1
	fi
	statement="$statement devices=$total_devices"

	# process debug level
	if [ "$enable_debug" != false ]; then
		if [[ ! "$enable_debug" =~ ^[0-9]+$ ]]; then
			_print_status error "bad debug value: $enable_debug"
			exit 1
		fi
		statement="$statement debug=$enable_debug"
	fi

	# process max width
	if [ "$max_width" != "" ]; then
		if [[ ! "$max_width" =~ ^[0-9]+$ ]]; then
			_print_status error "bad max_width value: $max_width"
			exit 1
		fi
		statement="$statement max_width=$max_width"
	fi

	# process max height
	if [ "$max_height" != "" ]; then
		if [[ ! "$max_height" =~ ^[0-9]+$ ]]; then
			_print_status error "bad max_height value: $max_height"
			exit 1
		fi
		statement="$statement max_height=$max_height"
	fi

	# process max openers
	if [ "$max_user" != "" ]; then
		if [[ ! "$max_user" =~ ^[0-9]+$ ]]; then
			_print_status error "bad max_operners value: $max_user"
			exit 1
		fi
		statement="$statement max_openers=$max_user"
	fi

	# process max buffer
	if [ "$max_buffer" != "" ]; then
		if [[ ! "$max_buffer" =~ ^[0-9]+$ ]]; then
			_print_status error "bad max_buffer value: $max_buffer"
			exit 1
		fi
		statement="$statement max_buffer=$max_buffer"
	fi

	# process video IDs
	video_id=""
	for item in "${ids_list[@]}"; do
		if [ "$video_id" != "" ]; then
			video_id="${video_id},"
		fi
		video_id="${video_id}${item}"
	done
	statement="$statement video_nr=$video_id"

	# process card names
	card_names=""
	for item in "${names_list[@]}"; do
		if [ "$card_names" != "" ]; then
			card_names="${card_names},"
		fi
		card_names="${card_names}'${item}'"
	done
	statement="$statement card_label=$card_names"

	# process capture capabilities
	caps=""
	for item in "${caps_list[@]}"; do
		if [ "$caps" != "" ]; then
			caps="${caps},"
		fi
		caps="${caps}${item}"
	done
	statement="$statement exclusive_caps=$caps"

	# create configuration file
	echo "$statement" > $modprobe_path

	# done.
	exit 0
}

process_device() {
	id="${1%%,*}"
	cap="${1##*,}"
	name="${1%,*}"
	name="${name#*,}"

	# validate all parameters
	if [[ ! "$cap" =~ ^[0-9]+$ ]] || [ $cap -le 0 ]; then
		_print_status error "device '$1' cap must be 0 or 1. Got: $cap"
		exit 1
	fi

	if [ "$name" == "" ]; then
		_print_status error "device '$1' need a name. Got: $name"
		exit 1
	fi

	if [[ ! "$id" =~ ^[0-9]+$ ]]; then
		_print_status error "device '$1' need numeric ID. Got: $id"
		exit 1
	fi

	for target in "${names_list[@]}"; do
		if [ "$name" == "$target" ]; then
			_print_status error "device '$1' got duplicated name."
			exit 1
		fi
	done

	for target in "${ids_list[@]}"; do
		if [ "$id" == "$target" ]; then
			_print_status error "device '$1' got duplicated id."
			exit 1
		fi
	done

	# append into list
	names_list+=($name)
	caps_list+=($cap)
	ids_list+=($id)
}

remove_module_configurations() {
	_check_user_permission

	# remove files
	case "$remove_target" in
	modprobe)
		rm "$modprobe_path" &> /dev/null
		;;
	modload)
		rm "$modload_path" &> /dev/null
		;;
	all)
		rm "$modprobe_path" &> /dev/null
		rm "$modload_path" &> /dev/null
		;;
	*)
		_print_status error "unknown target to remove. Use --help."
		;;
	esac

	#done
	exit 0
}

print_version() {
	echo "$version"
	exit 0
}

print_help() {
	line="$(printf '%0.s─' $(seq 1 $(stty size | awk '{print $2}')))"
	echo -e "\
V4L2LOOPBACK CONFIGURATOR
$line
The helper to configure V4L2LOOPBACK Video Loopback Module.

WARNING:
1. You need to be **su** or **sudo** to execute this program.

USAGE EXAMPLES:
1. $ $0 \\
	--boot \\
	--devices 10,'Cam 1',1 \\
	--devices 11,'Cam 2',2 \\
	--modprobe

2. $ $0 \\
	--boot \\
	--buffer 1024 \\
	--width 1096 \\
	--height 800 \\
	--opener 2 \\
	--devices 10,'Cam 1',1 \\
	--devices 11,'Cam 2',2 \\
	--modprobe

ARGUMENTS
─────────
-b, --boot				to load module on boot.

-buf, --buffer [NUMBER]			to set maximum buffer.

-dbg, --debug [NUMBER]			to enable debugging level

-d, --devices [ID],[LABEL],[CAPS]	generate a video device by using numeric
					ID [ID], its name label [LABEL], and
					capture capability [CAPS].

					[ID] must be a number. It produces
					/dev/video[ID] like /dev/video100

					[LABEL] is the name of the camera and
					should be in 'string'.

					[CAP] must be either '0' or '1' where
					'1' is to enable output capturing.

					Example, to create 2 devices:
					1) $ program --devices 100,"Name1",1 \\
						     --devices 101,"Name2",1
-hi, --height [NUMBER]			to set maximum height.

-h, --help, help			to print this help guide.

-m, --modprobe				to create modprobe configuration file.
					this argument must be added to the last.

-r, --remove [VALUE]			remove the configuration file from the
					system. It only takes 3 types of values:
						1. all - remove both modprobe
							 and module load.
						2. modprobe - remove only
								modprobe.
						3. modload - remove only module
								load.
					Default is all.
					Example:
						1. $ program --remove all
						2. $ program --remove modprobe
						3. $ program --remove modload

-u, --opener [NUMBER]			to set maximum users can open.

-v, --version				print program version.

-w, --width [NUMBER]			to set maximum width."

	exit 0
}

_parse_arguments() {
if [ $# == 0 ]; then
	print_help
	exit 0
fi

while true; do
case "$1" in
-b|--boot)
	if [ $# -eq 1 ]; then
		load_on_boot=0
	fi
	create_module_configurations
	;;
-buf|--buffer)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		max_buffer="$2"
		shift 1
	fi
	;;
-dbg|--debug)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		enable_debug="$2"
		shift 1
	fi
	;;
-d|--devices)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		process_device "$2"
		shift 1
	fi
	;;
-hi|--height)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		max_height="$2"
		shift 1
	fi
	;;
-h|--help|help)
	print_help
	;;
-m|--modprobe)
	create_modprobe_configurations
	;;
-r|--remove)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		remove_target="$2"
		shift 1
	fi
	remove_module_configurations
	;;
-u|--opener)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		max_user="$2"
		shift 1
	fi
	;;
-v|--version)
	print_version
	;;
-w|--width)
	if [ "$2" != "" ] && [ "${2:1}" != "-" ]; then
		max_width="$2"
		shift 1
	fi
	;;
*)
	if [ $load_on_boot -eq 0 ]; then
		exit 0
	fi
	_print_status error "unknown argument $1"
	exit 1
	;;
esac
shift 1
done
}

_parse_arguments $@
